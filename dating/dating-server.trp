(* Starting file for the server *)

import lists
let
   fun cmp p1 p2 matched =
      let
         val (px, agentx, pidx) = p1
         val (py, agenty, pidy) = p2
         val all_ready_matched = elem (px, py) matched orelse elem (py, px) matched

      in 
         if all_ready_matched then
            if agentx py = (true) andalso agenty px = (true) then 
               (* send profile *) 
               true
            else 
               false
         else 
            false
      end

   fun match [] _ matched = matched
   | match _ [] matched = matched 
   | match p2::ps p1 matched =
      let   
         val m = cmp p1 p2 matched
      in 
         if m then
            match ps p1 (p1, p2)::matched
         else 
            match ps p1 matched
      end

   fun match_all _ [] matched = matched 
   | match_all [] _ matched = matched 
   | match_all profiles (p1::ps) matched =
      let   
         val new_matches = match profiles p1 matched
      in 
         match_all profiles ps matched::new_matches
      end
  
    fun server ls matched = (* TODO: finish this *)
         let
            val data = receive [hn ("NEWPROFILE", data )
                                => data
                             ]
            val new_ls = data::ls
            val _ = print new_ls
            
            val new_matches = match_all new_ls new_ls [(data, data)]::matched
         in 
            (server new_ls new_matches)
         end

    (* Our main function starts the server and then requests the
       dispatcher to send some clients this way. *)

    fun main () =       
        let val thisNode = node (self ())
            val _ = printString ("Running node with identifier: " ^ thisNode)
            val _ =  register ("datingServer", spawn (fn() => server [] []), authority)
        in  (* TODO: you probably want to comment out the next line
                     while you develop your solution and work on a few 
                     custom clients;  *)
            send (whereis ("@dispatcher", "dispatcher"), ("DISPATCH", thisNode)); 
            ()
        end
in main ()
end
