(* Starting file for the server *)

import lists
let
   fun cmp p1 p2 matched =
      let
         val (px, agentx, pidx) = p1
         val (py, agenty, pidy) = p2
         val _ = printString "p1"
         val _ = print p1
         val _ = printString "p2"
         val _ = print p2
         val (xly, spx) = agentx py
         val (ylx, spy) = agenty px
         (*val _ = printString "Elem shit"
         val _ = print matched*)
         val all_ready_matched = elem (p1, p2) matched orelse elem (p2, p1) matched
         val _ = printString "Matched?"
         val _ = print all_ready_matched

      in 
         if all_ready_matched then
            let
               val _ = printString "Not Matched"
            in
               false
            end
         else 
            if xly andalso ylx then 
               (* send profile *) 
               let
                 val _ = send (pidx, ("NEWMATCH", spy))
                 val _ = send (pidy, ("NEWMATCH", spx))
               in
                 true
               end
            else 
               let
                 val _ = printString "Not Matched"
               in
                 false
               end
      end

   fun match [] _ matched = matched
   | match p2::ps p1 matched =
      let   
         val m = cmp p1 p2 matched
      in 
         if m then
            match ps p1 [(p1, p2)]::matched
         else 
            match ps p1 matched
      end
  
    fun server ls matched = (* TODO: finish this *)
         let
            val data = receive [hn ("NEWPROFILE", data )
                                => data
                             ]
            val new_ls = data::ls
            val _ = print new_ls
            
            val new_matches = match ls data [(data, data)]::matched
         in 
            (server new_ls new_matches)
         end

    (* Our main function starts the server and then requests the
       dispatcher to send some clients this way. *)

    fun main () =       
        let val thisNode = node (self ())
            val _ = printString ("Running node with identifier: " ^ thisNode)
            (*val _ =  register ("datingServer", spawn (fn() => server [] []), authority)*)
        in  (* TODO: you probably want to comment out the next line
                     while you develop your solution and work on a few 
                     custom clients;  
            send (whereis ("@dispatcher", "dispatcher"), ("DISPATCH", thisNode)); 
            ()*)
            register ("datingServer", spawn (fn() => server [] []), authority)
        end
in main ()
end
