(* Placeholder for the dating-client. Note that in order to communicate 
   with your server you will need to create the corresponding 
   trustmap file *)
import lists
import declassifyutil
let
   val name = "John" raisedTo {john}
   val age = 1918 raisedTo {john}
   val gender = false raisedTo {john}
   val interests = ["snow", "dogs"] raisedTo {john}
   val thisprofile = ({john}, name, age, gender, interests)
   fun genderPreference (lev, _, _, gender, _)  = if gender then (true, declassifydeep(thisprofile, authority, lev)) else (false, ())
   (*fun genderPreference (lev, _, _, gender, _)  = if gender then (true, thisprofile) else (false, ())*)
   
   fun receiveMatch matches = 
      let
         val profile = receive [hn ("NEWMATCH", profile )
                              => profile
                           ]
         val new_matches = profile::matches
         val _ = printWithLabels new_matches
      in
         receiveMatch new_matches
      end

   fun main () =
      let
         val p =  spawn (fn() => receiveMatch [])
         val thisNode = node (self ())
         val _ = printString ("Running node with identifier: " ^ thisNode)
         val _ = register("client",  p, authority)
         val data = (thisprofile, genderPreference, p)
      in 
         send(whereis ("QmaWwd8W8reMEkkavJxDnthukzGq9Y5D1QFbJja2iquBbX", "datingServer"), ("NEWPROFILE", data))
      end
in
  main()
end